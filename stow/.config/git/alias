# -*-mode:gitconfig-*- vim:ft=gitconfig

# ~/.config/git/alias
# =============================================================================
# Aliases for Git sourced by `~/.config/git/config`.

# If you are too lazy for typing "git checkout", "git status" or "git branch" all the time, it might be useful for you.
[alias]
    # Add all unstaged (including untracked) files.
    # See`git help add`
    aa = add --all

    # Shorthand for verbose add
    ad = add -v

    # See`git help add`
    ai = add --interactive

    # Lists aliases.
    aliases = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ / | sort

    # Amends the currently staged files to the latest commit.
    # See`git help commit`
    amend = commit --amend --reuse-message=HEAD

    # Interactively choose hunks of patch between the index and the work
    # tree and add them to the index.
    ap = add --patch

    # Delete a branch only if it is merged in the current branch.
    # See`git help branch`
    bd = branch --delete

    # Shorthand for branch --merged
    bm = branch --merged

    # Lists all branches.
    br = branch

    # Shows verbose output about branches.
    branches = branch -a

    # Shorthand for branch (verbose)
    brv = branch -v

    # Commits all changes.
    ca = !git add -A && git commit -av

    # Commits all with a message.
    cam = commit -am

    # Creates and switches to a new branch (mnemonic: "git new branch branch_name...")
    cb = checkout -B

    # Shows the current branch.
    cbr = rev-parse --abbrev-ref HEAD

    # Shows the difference between the target and the current branch.
    changelog = "!sh -c \"git log --oneline --no-merges ${1}..HEAD\" -"

    # Finds all direct children of given refs.
    # code borrowed from https://gist.github.com/kohsuke/7590246
    child = "!f() { for arg in \"$@\"; \
                    do \
                        for commit in $(git rev-parse $arg^0); \
                        do \
                            for child in $(git log --all --format='%H %P' | grep -F \" $commit\" | cut -f1 -d' '); \
                            do \
                                git describe $child 2> /dev/null || echo $child; \
                            done; \
                        done; \
                    done; }; f"

    # Lists the files with the most churn.
    churn = !git --no-pager log --name-only --oneline | grep -v ' ' | sort | uniq -c | sort -nr | head

    # Saves changes to the local repo.
    ci = commit

    # Clones a repository including all submodules.
    cl = clone --recursive

    # Delete all untracked files and directories.
    # See`git help clean`
    cleanit = clean -fd

    # Removes branches that have been merged with any branch (a.k.a delete merged)."
    cleanup = "!git branch --merged | grep  -v '\\*\\|main\\|master\\|develop' | xargs -n 1 -r git branch -d"

    # Shorthand for config
    # See`git help config` for config options.
    cn = config

    # Shorthand for global config
    cng = config --global

    # Shorthand for checkout, switches to a branch, but doesn't create it.
    co = checkout

    # Shows list of files in a conflict state.
    conflicts = !git diff --name-only --diff-filter=U

    # Lists contributors with number of commits.
    contributors = shortlog --summary --numbered

    # Counts the number of lines added/changes by the current author.
    count-lines    = "! git log --author=\"${1}\" \
                        --pretty=tformat: --numstat | \
                        awk '{ add += $1; subs += $2; loc += $1 - $2 } END \
                        { printf \"Added lines: %s\\nRemoved lines: %s\\nTotal lines: %s\\n\", add, subs, loc }' #"

    # Counts the number of commits authored by the given author.
    count-commits  = "! git shortlog --author=\"${1}\" -s -n --all --no-merges #"

    # Picks arbitrary commits by reference and appends them to the HEAD.
    cp = cherry-pick -x

    # Credits an author on the latest commit.
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Shows the diff between the latest commit and the unstaged changes.
    df = diff

    # Shows the diff between the latest commit and the staged changes.
    # http://stackoverflow.com/questions/8483041/git-color-words-excluding
    dfc = diff --cached --color-words='\\w+|[^[:space:]]'

    # Shows the diff between the latest commit and the current state (staged and unstaged changes).
    dfh = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # Shows the diff between the state `$number` revisions ago and the current state.
    dfi = !"d() { git diff --patch-with-stat HEAD~${1}; }; git diff-index --quiet HEAD -- || clear; d"

    # Shows a commit-hash diff between two branches.
    diff-commit-hash-to-branch = "!git log \
                                    --abbrev-commit \
                                    --graph \
                                    --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' \
                                    --date=relative ${1}"

    # Shows all conflicted files.
    diff-conflicted-files = diff --name-only --diff-filter=U

    # Shows the diff between the latest commit and the current state.
    diff-to-latest-commit = "!git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # `git diff-to-x-commit $number` Shows the diff between the state `$number` revisions ago and the current state.
    diff-to-x-commit = "!d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Discards changes to a file.
    discard = checkout --

    # Diff working tree to HEAD (a.k.a last commit).
    # Using difftool.tool for visualising diffs.
    # Do not prompt for each file. Use --prompt to override.
    dt = difftool --no-prompt

    # Diff staging area (a.k.a index) to HEAD (a.k.a last commit).
    # Using difftool.tool for visualising diffs.
    # Do not prompt for each file. Use --prompt to override.
    dtc = difftool --cached --no-prompt

    # Pretty-prints object's content.
    dump = cat-file -p

    # Finds a keyword in the source code through the entire git history.
    fd = "!f() { git rev-list --all | xargs git grep -F \"${1}\"; }; f"

    # Finds branches by commit hash.
    fdb = "!f() { git branch -a --contains \"${1}\"; }; f"

    # Finds commits by commit message.
    fdc = "!f() { git log \
                    --all \
                    --date=iso --decorate \
                    --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --grep=\"${1}\"; }; f"

    # Finds commits by source code.
    fds = "!f() { git log \
                    --all \
                    --date=iso \
                    --decorate \
                    --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' -S$1; }; f"

    # Find tags containing commit.
    fdt = "!f() { git describe --always --contains $1; }; f"

    # Switches to a branch, creating it if necessary.
    go = "!f() { git checkout -b \"${1}\" 2> /dev/null || git checkout \"${1}\"; }; f"

    # Ignores case and skip binary files.
    grep = grep -Ii

    # Shows short SHA, description, and history graph of last 10 commits.
    l = log --abbrev-commit --graph -n 10 --pretty=oneline

    # Shows changes to a file.
    lf = log -u

    # Shows pretty log of short SHA <SHA>, message, history graph, time, and author of commits.
    # https://www.kernel.org/pub/software/scm/git/docs/git-log.html#_pretty_formats
    ll = log \
        --abbrev-commit \
        --color \
        --date=iso \
        --decorate \
        --graph \
        --no-merges \
        --topo-order \
        --pretty=format:'Commit:    %C(bold brightmagenta)%h%Creset %C(dim yellow)<%H>%Creset %C(bold brightgreen)%G?%Creset -%C(auto)%d%Creset%n''           %C(magenta)%s%C(reset)%n''Date:      %C(italic dim white)authored:%C(reset)  %C(green)%ad%C(reset) %C(brightcyan)(%ar)%C(reset)%n''           %C(italic dim white)committed:%C(reset) %C(blue)%cd%C(reset) %C(brightblue)(%cr)%Creset%nAuthor:    %C(dim green)<%an - %aE>%Creset%nCommitter: %C(dim blue)<%an - %aE>%Creset'

    # Writes dangling objects to lost and found.
    lost = fsck --lost-found

    # ls alias
    ls = ls-files

    lst = "! git ll --name-status"

    # Fires up the merge tool.
    mt = mergetool

    # Shows the not merged branches compared to the current branch.
    nm = branch --no-merged

    # Shows the not merged branches compared to the main branch.
    nmm = branch --no-merged main

    # Checks out our changes, in case of conflicts.
    ours = checkout --ours

    # Shows the last commit.
    parent = log -1 HEAD

    # Shows the list of changes.
    patch = show HEAD -U999999

    # Pulls in remote changes for the current repository and all its submodules.
    pl = git pull --recurse-submodules

    # Origin: https://stackoverflow.com/a/33548037/4842742
    prune-branches = "!git fetch -p && \
                        for branch in \
                        $(git for-each-ref \
                            --format '%(refname) %(upstream:track)' refs/heads | \
                                awk '$2 == \"[gone]\" {sub(\"refs/heads/\", \"\", $1); print $1}'); \
                                do git branch -D \"${branch}\"; \
                                done"

    # Push
    ps = push

    # Forces push without overwriting the work of others.
    pushf = push --force-with-lease

    # Aborts rebase.
    rba = rebase --abort

    # Stages modified files and continues rebase.
    rbc = "!f(){ git add -A && git rebase --continue; }; f"

    # Rebases interactively with the given number of latest commits.
    rbi = "!r() { git rebase -i HEAD~$1; }; r"

    # Skip rebase
    rbs = rebase --skip

    # Via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
    recent-branches = "!git for-each-ref --count=5 --sort=-committerdate refs/heads/ --format='%(refname:short)'"

    # Shows verbose output about remotes.
    remotes = remote -v

    # Restores savepoint.
    restore = "!f(){ git add -A && git commit -qm 'RESTORE SAVEPOINT'; git reset $1 --hard; }; f"

    # Removes the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    # Reviews the current author changes.
    review = !git diff \
                --cached \
                --name-only | \
                xargs -n 1 git blame --porcelain | \
                grep  \"^author \" | \
                sort | \
                uniq -c | \
                sort -nr | \
                head -10

    # Rebases interactively.
    ri = "!f(){ git fetch origin && git rebase --interactive origin/${1-master}; }; f"

    # Make "git grep" look a bit like "ack"/"ag". Note that you need to
    # specify --no-index to search all files, and that submodules are not
    # searched.
    rg = grep --extended-regexp --break --heading --line-number           # Interactive add. Used for patching.

    # Update all remotes.
    ru = remote update

    # Applies stash (restore changes).
    sa = stash apply

    # Saves savepoint.
    save = !git add -A && git commit -m 'SAVEPOINT'

    # Drop stashes (destroy changes).
    sd = stash drop

    # grep alias
    search = grep

    # Sets origin remote.
    set-origin = remote set-url origin

    # Sets upstream remote.
    set-upstream = remote set-url upstream

    # Retrieves the commit Sha.
    sha = rev-parse HEAD

    # Shorthand for shortlog
    shl = shortlog

    # Displays repo disk consumption
    size = git count-objects -v --human-readable

    # Lists stashes.
    sl = stash list

    # Pulls remota and auto-updates local submodules.
    spull = !git pull && git submodule sync --recursive && git submodule update --init --recursive

    # Pushes to remote, including all its submodules recursively.
    spush = push --recurse-submodules=on-demand

    # Views the current working tree status, and shows the current branch as well using the short format.
    # See`git help status`
    st = status -bs

    # Lists stashes.
    stashes = stash list

    # Brings in remote changes and syncs back.
    sync = !git pull --rebase && git push

    # Shows verbose output about tags.
    tags = tag -l

    # Checks out their changes, in case of conflicts.
    theirs = checkout --theirs

    # Lists top 10 contributors.
    top = !git log --format=format:%an | sort | uniq -c | sort -r | head -n 10

    # Shows object type.
    type = cat-file -t

    # Undos commit and leaves files in uncommitted state (only for non-public commits).
    uncommit = reset --soft HEAD^

    # Undos last commit.
    undo = reset HEAD~1 --mixed

    # Unstages a file from index (tracking).
    unstage = reset -q HEAD --

    # Brings in remote changes.
    up = !git pull --rebase --prune $@ && git submodule update --init --recursive

    # Show the user email for the current repository.
    whoami = config user.email

    # Commits as Work in Progress.
    wip = commit -am "WIP"

    # Wipes savepoint - DANGEROUS.
    wipe = "!f() { \
                    rev=$(git rev-parse ${1-HEAD}); \
                    git add -A && \
                    git commit --allow-empty -qm 'WIPE SAVEPOINT' && \
                    git reset $rev --hard; \
             }; f"

default_pane_resize="5"

###############
### Prefix ###
#############

unbind C-b
bind C-a send-prefix
bind C-b display-message

bind Q confirm-before -p "kill-server #S? (y/n)" kill-server

################
### Session ###
##############

unbind a
bind a

bind ^D detach-client # Keep your finger on ctrl, or don't
bind D  if -F '#{session_many_attached}' \
        'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
        'display "Session has only 1 client attached"'

bind q  confirm-before -p "kill-session #S? (y/n)" kill-session

bind S if -F '#{s/off//:status}' 'set status off' 'set status on'

bind s   choose-tree -Zs
bind C-s new-session -c "#{pane_current_path}" # New windows/pane in ${PWD}

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with: " \
         "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

###############
### Window ###
#############

# Window and Split Management
unbind \=
bind \= select-layout even-vertical
bind +  select-layout even-horizontal
bind \# select-layout tiled

# Select window with meta+number
bind -n M-0 select-window -t :=0
bind -n M-1 select-window -t :=1
bind -n M-2 select-window -t :=2
bind -n M-3 select-window -t :=3
bind -n M-4 select-window -t :=4
bind -n M-5 select-window -t :=5
bind -n M-6 select-window -t :=6
bind -n M-7 select-window -t :=7
bind -n M-8 select-window -t :=8
bind -n M-9 select-window -t :=9

# Split panes using | and - in the same directory please.
unbind %
bind -r \\ split-window -h -c "#{pane_current_path}"
bind -r |  split-window -fh -c "#{pane_current_path}"

unbind '"'
bind -r - split-window -v -c "#{pane_current_path}"  # Split the current pane into two, top and bottom.
bind -r _ split-window -fv -c "#{pane_current_path}" # Split the current pane full height into two, top and bottom.

bind -r "<" swap-window -d -t -1
bind -r ">" swap-window -d -t +1

bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

unbind l
bind -r a  last-window   # cycle thru MRU tabs
bind -r A  list-windows
bind -r C-a previous-window

bind -r Tab next-window

# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
bind e setw synchronize-panes \; display-message 'Pane synchronization [#{?synchronize-panes,ON,OFF}]'

bind w   choose-tree    -Zw
bind W   command-prompt -p index "select-window -t ':%%'"
bind C-w new-window     -c "#{pane_current_path}" # New windows/pane in ${PWD}

bind X   confirm-before -p "kill-window #W? (y/n)" kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"

#############
### Pane ###
###########

# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
bind ] if '[ #{pane_index} -eq 1 ]' \
       'swap-pane -s "!"' \
       'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

bind -r "." swap-pane -D  # Swap current pane with the next one.
bind -r "," swap-pane -U  # Swap current pane with the previous one.

# pane resize
bind -r Left  resize-pane -L "${default_pane_resize}" # Resize current pane 5 cells to the left.
bind -r Down  resize-pane -D "${default_pane_resize}" # Resize current pane 5 cells to the bottom.
bind -r Up    resize-pane -U "${default_pane_resize}" # Resize current pane 5 cells to the top.
bind -r Right resize-pane -R "${default_pane_resize}" # Resize current pane 5 cells to the right.

bind b set pane-border-status

bind B break-pane

bind j command-prompt -p "join pane from:" "join-pane -s '%%'"
bind J command-prompt -p "send pane to:"   "join-pane -t '%%'"

bind -r P  select-pane -t :.-
bind -r ^P select-pane -t :.+

bind -r C-q  display-panes

bind z resize-pane -Z # Zoom pane

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
bind -n 'C-h' if-shell "${is_vim}" 'send-keys C-h' 'select-pane -L'
bind -n 'C-j' if-shell "${is_vim}" 'send-keys C-j' 'select-pane -D'
bind -n 'C-k' if-shell "${is_vim}" 'send-keys C-k' 'select-pane -U'
bind -n 'C-l' if-shell "${is_vim}" 'send-keys C-l' 'select-pane -R'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"${is_vim}\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"${is_vim}\" 'send-keys C-\\\\'  'select-pane -l'"

# Resize panes in vim
bind -n 'M-h' if-shell "${is_vim}" "send-keys M-h" "resize-pane -L 10"                      # Alt + h
bind -n 'M-j' if-shell "${is_vim}" "send-keys M-k" "resize-pane -D ${default_pane_resize}"  # Alt + k
bind -n 'M-k' if-shell "${is_vim}" "send-keys M-j" "resize-pane -U ${default_pane_resize}"  # Alt + j
bind -n 'M-l' if-shell "${is_vim}" "send-keys M-l" "resize-pane -R 10"                      # Alt + l

bind x kill-pane

################
### General ###
##############

bind m set -g mouse \; display-message 'Mouse [#{?mouse,ON,OFF}]'

bind M setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind C-M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

bind n command-prompt -I "#{window_name}" "rename-window '%%'"
bind N command-prompt -I "#{session_name}" "rename-session '%%'"

unbind r
bind r source-file ${XDG_CONFIG_HOME}/tmux/tmux.conf \; display-message "[tmux] Config reloaded!" # Reload the tmux configuration file

bind ^r refresh-client

bind-key -n C-q display-popup -w "90%" -h "85%" -E nvim -c ":ObsidianSearch"

#############
### Copy ###
###########

# Copy tmux paste buffer to CLIPBOARD
bind C-c run "tmux save-buffer - | pbcopy"

# Copy CLIPBOARD to tmux paste buffer and paste tmux paste buffer
bind C-v run "tmux set-buffer -- \"$(pbpaste)\"; tmux paste-buffer"

unbind [
bind Escape copy-mode

unbind p
bind p paste-buffer

# Copy tmux copy to clipboard (need xsel - possible to use pbcopy as well)
unbind -T copy-mode-vi Enter # Default for begin-selection
unbind -T copy-mode-vi Space # Default for copy-selection

bind-key -T copy-mode-vi '0' send -X back-to-indentation
bind-key -T copy-mode-vi 'r' send -X rectangle-toggle
bind-key -T copy-mode-vi 'v' send -X begin-selection
# copy selected selection with y - if using the mouse `y` need to be used before releasing the mouse button
bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel "pbcopy"

bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi Space send -X jump-again

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# https://github.com/samoshkin/tmux-config/blob/master/tmux/tmux.conf#L350C1-L381C20
# ==============================================
# ===   Nesting local and remote sessions    ===
# ==============================================

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.remote.conf'

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session

# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237

# Also, change some visual styles when window keys are off
bind -T root F12  \
    set prefix None \;\
    set key-table off \;\
    set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
    set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
    set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u window-status-current-style \;\
  set -u window-status-current-format \;\
  refresh-client -S
